/**
 * Angel One TOTP Generator using the speakeasy library
 * This should match the TOTP generated by your authenticator app
 */

const speakeasy = require('speakeasy');

/**
 * Parses a TOTP URI and extracts components
 * @param {string} uri - The otpauth URI
 * @returns {Object} - The parsed components
 */
function parseOTPAuthURI(uri) {
  try {
    // Basic parsing of otpauth URI
    const url = new URL(uri);
    const params = url.searchParams;
    
    // Extract account name (if present)
    const pathParts = url.pathname.split('/');
    const label = pathParts[pathParts.length - 1];
    
    return {
      type: url.hostname, // Should be "totp"
      label: decodeURIComponent(label),
      secret: params.get('secret'),
      issuer: params.get('issuer'),
      algorithm: params.get('algorithm') || 'SHA1',
      digits: parseInt(params.get('digits') || '6', 10),
      period: parseInt(params.get('period') || '30', 10)
    };
  } catch (error) {
    console.error('Error parsing TOTP URI:', error);
    return null;
  }
}

/**
 * Generates a TOTP code for Angel One authentication
 * @param {string} otpauthURL - The full otpauth URL
 * @returns {string} - The 6-digit TOTP code
 */
function generateAngelOneTOTP(otpauthURL) {
  // Parse the otpauth URL
  const params = parseOTPAuthURI(otpauthURL);
  
  if (!params || !params.secret) {
    throw new Error('Invalid TOTP URI or missing secret');
  }
  
  // Get current timestamp
  const timestamp = Math.floor(Date.now() / 1000);
  
  // Generate TOTP using speakeasy
  const token = speakeasy.totp({
    secret: params.secret,
    encoding: 'base32',
    algorithm: params.algorithm,
    digits: params.digits,
    period: params.period,
    timestamp: timestamp
  });
  
  return token;
}

/**
 * Checks if the generated TOTP matches what a standard authenticator would produce
 * @param {string} otpauthURL - The otpauth URL
 * @param {string} token - Token to verify (optional, generates new one if not provided)
 * @returns {boolean} - Whether the token is valid
 */
function verifyTOTP(otpauthURL, token) {
  const params = parseOTPAuthURI(otpauthURL);
  
  if (!params || !params.secret) {
    throw new Error('Invalid TOTP URI or missing secret');
  }
  
  // If no token provided, use the current one
  if (!token) {
    token = generateAngelOneTOTP(otpauthURL);
  }
  
  // Verify the token with a window of 1 to handle slight time differences
  return speakeasy.totp.verify({
    secret: params.secret,
    encoding: 'base32',
    token: token,
    algorithm: params.algorithm,
    digits: params.digits,
    period: params.period,
    window: 1
  });
}

/**
 * Get time remaining for current TOTP
 * @param {string} otpauthURL - The otpauth URL
 * @returns {number} - Seconds remaining for current token
 */
function getTOTPTimeRemaining(otpauthURL) {
  const params = parseOTPAuthURI(otpauthURL);
  const period = params?.period || 30;
  const currentTime = Math.floor(Date.now() / 1000);
  return period - (currentTime % period);
}

// Export the functions
module.exports = {
  generateAngelOneTOTP,
  verifyTOTP,
  getTOTPTimeRemaining,
  parseOTPAuthURI
};